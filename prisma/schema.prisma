generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String     @id @default(cuid())
  clerkUserId String     @unique
  email       String     @unique
  name        String
  imageUrl    String?
  role        String?    @default("user") //"admin" or "user"
  progress    Progress[]
  articles    Articles[]
  comments    Comment[]
  likes       Like[] // A user can like multiple articles
  commentLikes CommentLike[] // A user can like multiple comments
}

model Articles {
  id            String    @id @default(cuid())
  title         String
  content       String
  category      String
  featuredImage String
  author        User      @relation(fields: [authorId], references: [id])
  authorId      String
  comments      Comment[]
  likes         Like[] // An article can have multiple likes
  createdAt     DateTime  @default(now())
}

model Comment {
  id        String   @id @default(cuid())
  body      String
  articleId String
  article   Articles @relation(fields: [articleId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  likes     CommentLike[]
  createdAt DateTime @default(now())
}

model CommentLike {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  comment   Comment  @relation(fields: [commentId], references: [id])
  commentId String
  createdAt DateTime @default(now())

  @@unique([userId, commentId])
}

model Like {
  id        String   @id @default(cuid())
  isLiked   Boolean  @default(false)
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  article   Articles @relation(fields: [articleId], references: [id])
  articleId String
  createdAt DateTime @default(now())

  @@unique([userId, articleId]) // Ensures a user can like an article only once
}

model Track {
  id          String     @id @default(cuid())
  title       String
  description String
  modules     Module[]
}

model Module {
  id        String   @id @default(cuid())
  title     String
  track     Track    @relation(fields: [trackId], references: [id])
  trackId   String
  items     RoadmapItem[]
}
model RoadmapItem {
  id        String   @id @default(cuid())
  title     String
  link      String?
  module    Module   @relation(fields: [moduleId], references: [id])
  moduleId  String
  progress  Progress[]
}
model Progress {
  id         String       @id @default(cuid())
  user       User         @relation(fields: [userId], references: [id])
  userId     String
  item       RoadmapItem  @relation(fields: [itemId], references: [id])
  itemId     String
  status     ProgressStatus @default(NOT_STARTED)
  updatedAt  DateTime     @updatedAt
  
  @@unique([userId, itemId])
}

enum ProgressStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
}
